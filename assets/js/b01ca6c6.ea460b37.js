"use strict";(self.webpackChunkvibhavari_bellutagi=self.webpackChunkvibhavari_bellutagi||[]).push([[9711],{3246:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var i=t(4428),s=t(4848),r=t(8453),o=t(4512);const l={slug:"automate-unit-tests-using-ci-cd",title:"Automating Unit Tests and Deploying AWS Glue & Lambda Python Jobs with CI/CD",authors:["me"],tags:["ci-cd","de","devops"],keywords:["unit testing","ci/cd","Data engineering","AWS DevOps"],hide_table_of_contents:!1},a=void 0,c={authorsImageUrls:[void 0]},d=[{value:"Summary",id:"summary",level:2},{value:"CI/CD Lifecycle Overview",id:"cicd-lifecycle-overview",level:2},{value:"Continuous Integration (CI)",id:"continuous-integration-ci",level:3},{value:"Continuous Deployment (CD)",id:"continuous-deployment-cd",level:3},{value:"Step 1: Modularizing Code for Testability",id:"step-1-modularizing-code-for-testability",level:2},{value:"Step 2: Writing and Executing Unit Tests",id:"step-2-writing-and-executing-unit-tests",level:2},{value:"Step 3: Sample Jenkins CI Pipeline Configuration",id:"step-3-sample-jenkins-ci-pipeline-configuration",level:2},{value:"Step 4: SampleJenkins CD Pipeline + Terraform",id:"step-4-samplejenkins-cd-pipeline--terraform",level:2},{value:"Toolchain Summary",id:"toolchain-summary",level:2},{value:"Final Thoughts",id:"final-thoughts",level:2},{value:"Next Steps",id:"next-steps",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["In this blog, we\u2019ll explore how to set up a complete CI/CD pipeline using ",(0,s.jsx)(n.code,{children:"Jenkins"}),", ",(0,s.jsx)(n.code,{children:"pytest"}),", and ",(0,s.jsx)(n.code,{children:"Terraform"})," to automate unit testing and deployment for AWS Glue and Lambda jobs. You\u2019ll also learn how to manage Python dependencies using ",(0,s.jsx)(n.code,{children:"uv"})," and ",(0,s.jsx)(n.code,{children:"pyproject.toml"}),", use ",(0,s.jsx)(n.code,{children:"JFrog Artifactory"})," to store and retrieve build artifacts, and enforce code quality with ",(0,s.jsx)(n.code,{children:"Ruff"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"Automating the execution of unit tests within a DevOps pipeline is indispensable for ensuring the integrity, resilience, and maintainability of distributed data systems. As a data engineer, I\u2019ve worked on setting up Jenkins pipelines that streamline the development lifecycle. These pipelines have brought noticeable improvements in code quality, deployment consistency, and developer confidence."}),"\n",(0,s.jsx)(n.p,{children:"This comprehensive guide presents a production-ready approach to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Automating unit testing for AWS Glue and Lambda Python applications using ",(0,s.jsx)(n.code,{children:"pytest"})]}),"\n",(0,s.jsxs)(n.li,{children:["Enforcing code quality with ",(0,s.jsx)(n.code,{children:"ruff"})," (replacing flake8, black, and isort)"]}),"\n",(0,s.jsxs)(n.li,{children:["Managing dependencies efficiently with ",(0,s.jsx)(n.code,{children:"uv"})," and ",(0,s.jsx)(n.code,{children:"pyproject.toml"})]}),"\n",(0,s.jsxs)(n.li,{children:["Packaging and publishing artifacts via ",(0,s.jsx)(n.code,{children:"JFrog Artifactory"})]}),"\n",(0,s.jsxs)(n.li,{children:["Deploying verified code to Amazon S3 via ",(0,s.jsx)(n.code,{children:"Terraform"})]}),"\n",(0,s.jsx)(n.li,{children:"Executing downstream Glue or Lambda jobs using the uploaded package"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"cicd-lifecycle-overview",children:"CI/CD Lifecycle Overview"}),"\n",(0,s.jsx)(n.h3,{id:"continuous-integration-ci",children:"Continuous Integration (CI)"}),"\n",(0,s.jsx)(n.p,{children:"Triggered on each commit or pull request, the CI pipeline performs the following operations:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Initialize Environment"}),": Initialize Environment: Use ",(0,s.jsx)(n.code,{children:"uv"})," to set up and sync dependencies from pyproject.toml."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Install Dependencies"}),": Install project requirements from ",(0,s.jsx)(n.code,{children:"pyproject.toml"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Code Quality Check"}),":","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Formatting"}),": Use ",(0,s.jsx)(n.code,{children:"uv run ruff format --check"})," to auto-format your code consistently."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Linting"}),": Use ",(0,s.jsx)(n.code,{children:"uv run ruff check ."})," to detect syntax issues, unused imports, and common code errors."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Import Sorting"}),": Use ",(0,s.jsx)(n.code,{children:"uv run ruff check --select I"})," to enforce import order rules."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Unit Testing"}),": Execute ",(0,s.jsx)(n.code,{children:"uv run pytest"})," and produce JUnit reports."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Artifact Packaging"}),": Zip the tested code and upload it to JFrog Artifactory."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Using ",(0,s.jsx)(n.code,{children:"Formatter"})," first and then ",(0,s.jsx)(n.code,{children:"linter"})," will save you time and effort in fixing the linting issues, you will thank me later ;)"]})}),"\n",(0,s.jsx)(n.h3,{id:"continuous-deployment-cd",children:"Continuous Deployment (CD)"}),"\n",(0,s.jsx)(n.p,{children:"Upon CI success, CD automates infrastructure provisioning and code deployment:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Artifact Download"}),": Retrieve the latest build from Artifactory."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Terraform Plan"}),": Generate a preview of infrastructure changes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Terraform Apply"}),": Apply changes to provision or update cloud resources."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Trigger Execution"}),": Enable Glue or Lambda jobs to consume the new code from ",(0,s.jsx)(n.code,{children:"S3"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"CI/CD Pipeline",src:t(8257).A+"",width:"7983",height:"4861"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"step-1-modularizing-code-for-testability",children:"Step 1: Modularizing Code for Testability"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Python Code Structure"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"data-pipeline/\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 Jenkinsfile\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 handler.py         # Lambda handler logic\n\u2502   \u251c\u2500\u2500 transform.py       # Glue transformations or shared business logic\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 test_handler.py\n\u2502   \u2514\u2500\u2500 test_transform.py\n\u251c\u2500\u2500 scripts/\n\u2502   \u2514\u2500\u2500 deploy.sh          # Optional scripts for local testing or deployment\n\u2514\u2500\u2500 README.md\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Glue Example"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'\n# transform.py\ndef clean_name(data):\n    return [{"name": item["name"].strip().lower()} for item in data]\n\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"step-2-writing-and-executing-unit-tests",children:"Step 2: Writing and Executing Unit Tests"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Basic Unit Test with Pytest"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from transform import clean_name\n\ndef test_clean_name():\n    input_data = [{"name": " John "}]\n    expected_output = [{"name": "john"}]\n    assert clean_name(input_data) == expected_output\n'})}),"\n",(0,s.jsx)(n.p,{children:"Run locally:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"uv run pytest tests/\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Mocking AWS Services with Moto"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"\nfrom moto import mock_s3\nimport boto3\n\ndef test_s3_upload():\n    with mock_s3():\n        s3 = boto3.client('s3', region_name='us-east-1')\n        s3.create_bucket(Bucket='test-bucket')\n        s3.put_object(Bucket='test-bucket', Key='file.txt', Body='test')\n        response = s3.get_object(Bucket='test-bucket', Key='file.txt')\n        assert response['Body'].read().decode() == 'test'\n\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Sample Pyproject.toml for Dependency Management"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'\n[project]\nname = "data-pipeline"\nversion = "0.1.0"\ndependencies = [\n    "boto3",\n    "pytest",\n    "moto",\n    "ruff"\n]\n\n[tool.ruff]\nline-length = 88\nselect = ["E", "F", "I", "UP"]\nexclude = [".venv", "build"]\n\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"step-3-sample-jenkins-ci-pipeline-configuration",children:"Step 3: Sample Jenkins CI Pipeline Configuration"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"CI Jenkinsfile using uv"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-groovy",children:"pipeline {\n    agent any\n    stages {\n        stage('Setup Env') {\n            steps { sh 'curl -Ls https://astral.sh/uv/install.sh | sh' }\n        }\n        stage('Install Deps') {\n            steps { sh 'uv sync' }\n        }\n        stage('Format') {\n            steps { sh 'uv run ruff format --check' }\n        }\n        stage('Lint') {\n            steps { sh 'uv run ruff check .' }\n        }\n        stage('Unit Tests') {\n            steps { sh 'uv run pytest' }\n        }\n        stage('Publish Artifact') {\n            steps {\n                sh 'zip -r my_code.zip .'\n                sh 'curl -u $JFROG_USER:$JFROG_PASSWORD -T my_code.zip https://your-jfrog-url/artifactory/repo-name/'\n            }\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"step-4-samplejenkins-cd-pipeline--terraform",children:"Step 4: SampleJenkins CD Pipeline + Terraform"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"CD Jenkinsfile"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-groovy",children:"\npipeline {\n    agent any\n    environment {\n        TF_VAR_code_url = 'https://your-jfrog-url/artifactory/repo-name/my_code.zip'\n    }\n    stages {\n        stage('Terraform Init') { steps { sh 'terraform init' } }\n        stage('Terraform Plan') { steps { sh 'terraform plan' } }\n        stage('Terraform Apply') { steps { sh 'terraform apply -auto-approve' } }\n    }\n}\n\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Sample Terraform Code"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-hcl",children:'\nresource "null_resource" "download_code" {\n  provisioner "local-exec" {\n    command = "curl -o /tmp/my_code.zip ${var.code_url}"\n  }\n}\n\nresource "aws_s3_object" "upload_code" {\n  bucket = "my-etl-code-bucket"\n  key    = "glue_or_lambda/my_code.zip"\n  source = "/tmp/my_code.zip"\n}\n\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"toolchain-summary",children:"Toolchain Summary"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.jenkins.io/",children:"Jenkins"})," \u2013 Core CI/CD orchestrator"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docs.pytest.org/en/stable/",children:"pytest"})," \u2013 Testing framework for validating business logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docs.getmoto.org/en/latest/docs/getting_started.html",children:"moto"})," \u2013 AWS mocking tool for offline unit testing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docs.astral.sh/ruff/",children:"ruff"})," \u2013 All-in-one Python linter, formatter, and import sorter"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docs.astral.sh/uv/",children:"uv"})," \u2013 Lightning-fast dependency manager for Python projects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.terraform.io/",children:"Terraform"})," \u2013 Infrastructure as Code for AWS resource automation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://jfrog.com/",children:"JFrog Artifactory"})," \u2013 Artifact repository for storing build assets"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"final-thoughts",children:"Final Thoughts"}),"\n",(0,s.jsx)(n.p,{children:"Having a CI/CD pipeline in place is no longer optional \u2014 it\u2019s foundational to any reliable data engineering workflow. Whether you're building Lambda functions, Glue jobs, or full-fledged data platforms, automating testing, validation, and deployment allows teams to move faster while maintaining confidence in every release."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.p,{children:["Hope this guide helps you implement a robust CI/CD pipeline for your projects. Let me know if you need running code examples or have any questions. Feel free to reach out to me on ",(0,s.jsx)(o.A,{})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8257:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/ci_cd-04907051604d8955fc5c3e08d375dc26.png"},4428:e=>{e.exports=JSON.parse('{"permalink":"/blog/automate-unit-tests-using-ci-cd","source":"@site/blog/2025-03-21-ci-cd-pipeline/index.md","title":"Automating Unit Tests and Deploying AWS Glue & Lambda Python Jobs with CI/CD","description":"In this blog, we\u2019ll explore how to set up a complete CI/CD pipeline using Jenkins, pytest, and Terraform to automate unit testing and deployment for AWS Glue and Lambda jobs. You\u2019ll also learn how to manage Python dependencies using uv and pyproject.toml, use JFrog Artifactory to store and retrieve build artifacts, and enforce code quality with Ruff.","date":"2025-03-21T00:00:00.000Z","tags":[{"inline":false,"label":"ci-cd","permalink":"/blog/tags/ci-cd","description":"CI CD tag description"},{"inline":false,"label":"data-engineering","permalink":"/blog/tags/de","description":"DE tag description"},{"inline":false,"label":"devops","permalink":"/blog/tags/devops","description":"devops tag description"}],"readingTime":4.68,"hasTruncateMarker":true,"authors":[{"name":"Vibhavari Bellutagi","title":"Data Engineer","url":"https://buildwithvibs.in/","socials":{"github":"https://github.com/vibhabellutagi19","linkedin":"https://www.linkedin.com/in/vibhavari-bellutagi-837871189/","twitter":"https://twitter.com/buildwith_vibs"},"imageURL":"https://avatars.githubusercontent.com/u/39341524?s=400&u=5d760c052fe0614d3af649de9e85474d1cafeba7&v=4","key":"me","page":null}],"frontMatter":{"slug":"automate-unit-tests-using-ci-cd","title":"Automating Unit Tests and Deploying AWS Glue & Lambda Python Jobs with CI/CD","authors":["me"],"tags":["ci-cd","de","devops"],"keywords":["unit testing","ci/cd","Data engineering","AWS DevOps"],"hide_table_of_contents":false},"unlisted":false,"nextItem":{"title":"The Life Cycle of a Spark Application ( Outside )","permalink":"/blog/spark-application-lifecycle-outside"}}')}}]);