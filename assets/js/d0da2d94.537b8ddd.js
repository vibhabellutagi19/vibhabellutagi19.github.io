"use strict";(self.webpackChunkvibhavari_bellutagi=self.webpackChunkvibhavari_bellutagi||[]).push([[8067],{7044:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>d});var s=l(2817),i=l(4848),a=l(8453),r=l(4512);const t={slug:"handling-nulls-in-spark",title:"Handling Nulls in Spark",authors:["me"],tags:["de","apache-spark"],keywords:["data engineering","apache spark","nulls in spark"],hide_table_of_contents:!1,image:"assets/logo.png"},o=void 0,c={authorsImageUrls:[void 0]},d=[{value:"Handling nulls in Spark",id:"handling-nulls-in-spark",level:2},{value:"Data Preparation",id:"data-preparation",level:3},{value:"Coalesce",id:"coalesce",level:3},{value:"Checking for nulls",id:"checking-for-nulls",level:3},{value:"Nulls when ordering columns",id:"nulls-when-ordering-columns",level:3},{value:"Replace nulls with a value",id:"replace-nulls-with-a-value",level:3},{value:"Remove nulls",id:"remove-nulls",level:3},{value:"Special Null functions",id:"special-null-functions",level:3},{value:"Conclusion",id:"conclusion",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components},{Details:l}=n;return l||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["In SQL ",(0,i.jsx)(n.code,{children:"null"})," or ",(0,i.jsx)(n.code,{children:"Null"})," is a special marker used to indicate that a data value does not exist in the database. A null should not be confused with a value of 0. A null indicates a lack of a value, which is not the same as a zero value."]}),"\n",(0,i.jsxs)(n.p,{children:['For example:\nConsider the question "How many books does Krishna own?"\nThe answer may be ',(0,i.jsx)(n.code,{children:"zero"})," (we know that he owns none) or ",(0,i.jsx)(n.code,{children:"null"})," (we do not know how many he owns)."]}),"\n",(0,i.jsx)(n.p,{children:"Let's deep dive into handling nulls in Spark."}),"\n",(0,i.jsx)(n.h2,{id:"handling-nulls-in-spark",children:"Handling nulls in Spark"}),"\n",(0,i.jsx)(n.p,{children:"In Spark, a null value represents the absence of any value: it is not zero, an empty string, or false. Spark treats nulls in a way similar to SQL. When performing operations on null values, you need to be explicit about how to handle them, as any operation with a null value generally yields a null result (unless specifically handled)."}),"\n",(0,i.jsx)(n.p,{children:"Key Points about Nulls in Spark:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Null propagation"}),": If you do an arithmetic operation (e.g., ",(0,i.jsx)(n.code,{children:"colA + colB"}),") and either ",(0,i.jsx)(n.code,{children:"colA"})," or ",(0,i.jsx)(n.code,{children:"colB"})," is null, the result is null unless there is a function to handle null explicitly (like coalesce)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Comparison"}),": Comparisons with null always yield false or unknown. For example, df.filter(",(0,i.jsx)(n.code,{children:'df("age") == null'}),") might not work as intended. Instead, you need to use methods like isNull or isNotNull."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Equi-Null safe join"}),": Spark SQL provides nullSafeEq or eqNullSafe (",(0,i.jsx)(n.code,{children:"<=>"})," in SQL) to compare two columns including nulls. This means if both sides are null, it returns true."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"In SQL, null is a marker, not a value."})}),"\n",(0,i.jsx)(n.h3,{id:"data-preparation",children:"Data Preparation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from pyspark.sql import SparkSession\nfrom pyspark.sql.functions import col, isnull, when, coalesce\n\nspark = SparkSession.builder \\\n    .appName("NullHandlingExample") \\\n    .getOrCreate()\n\ndata = [\n    (6.1,   1071,  "12-Jun-98",  None,  None,                "The Land Girls"),\n    (6.9,   207,   "7-Aug-98",   None,  None,                "First Love, Last Rites"),\n    (6.8,   865,   "28-Aug-98",  None,  None,                "I Married a Strange Person"),\n    (5.8,   3275,  "1-Jul-86",  "13",  None,                "Pirates"),\n    (3.4,   165,   "9-Oct-98",   "62",  "Original Screenplay","Slam"),\n    (None,  None,  "15-Jan-99",  None,  None,                "Mississippi Mermaid"),\n    (7.7,   15133, "4-Apr-99",   None,  None,                "Following"),\n    (3.8,   353,   "9-Apr-99",   None,  "Original Screenplay","Foolish"),\n    (5.8,   3275,  "1-Jul-86",   "25",  None,                "Pirates"),\n    (7.0,   2906,  "31-Dec-46",  "86",  None,                "Duel in the Sun")\n]\n\ncolumns = ["IMDB_Rating", "IMDB_Votes", "Release_Date", "Rotten_Tomatoes_Rating", "Source", "Title"]\ndf = spark.createDataFrame(data, columns)\n\ndf.show()\n'})}),"\n",(0,i.jsxs)(l,{children:[(0,i.jsx)("summary",{children:"Output: You will see the movies data with some null values."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"+-----------+----------+------------+----------------------+-------------------+--------------------------+\n|IMDB_Rating|IMDB_Votes|Release_Date|Rotten_Tomatoes_Rating|Source             |Title                     |\n+-----------+----------+------------+----------------------+-------------------+--------------------------+\n|6.1        |1071      |12-Jun-98   |NULL                  |NULL               |The Land Girls            |\n|6.9        |207       |7-Aug-98    |NULL                  |NULL               |First Love, Last Rites    |\n|6.8        |865       |28-Aug-98   |NULL                  |NULL               |I Married a Strange Person|\n|5.8        |3275      |1-Jul-86    |13                    |NULL               |Pirates                   |\n|3.4        |165       |9-Oct-98    |62                    |Original Screenplay|Slam                      |\n|NULL       |NULL      |15-Jan-99   |NULL                  |NULL               |Mississippi Mermaid       |\n|7.7        |15133     |4-Apr-99    |NULL                  |NULL               |Following                 |\n|3.8        |353       |9-Apr-99    |NULL                  |Original Screenplay|Foolish                   |\n|5.8        |3275      |1-Jul-86    |25                    |NULL               |Pirates                   |\n|7.0        |2906      |31-Dec-46   |86                    |NULL               |Duel in the Sun           |\n+-----------+----------+------------+----------------------+-------------------+--------------------------+\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"coalesce",children:"Coalesce"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["In Spark SQL and DataFrame APIs, ",(0,i.jsx)(n.code,{children:"coalesce()"})," is used to return the first non-null value among its arguments."]}),"\n",(0,i.jsx)(n.li,{children:"If you have multiple columns and want a single column which picks up a non-null value from one of them in order, or you want to replace a single column\u2019s null value with a fallback."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'rating_df = df.select(col("Title"),  \n              col("Rotten_Tomatoes_Rating"),  \n              col("IMDB_Rating"),  \n              coalesce(col("Rotten_Tomatoes_Rating"), col("IMDB_Rating") * 10).alias("Rating"))\n\nrating_df.show(10, False)\n'})}),"\n",(0,i.jsxs)(l,{children:[(0,i.jsxs)("summary",{children:["Output: You will see when ",(0,i.jsx)(n.code,{children:"Rotten_Tomatoes_Rating"})," is null, ",(0,i.jsx)(n.code,{children:"Rating"})," is calculated as ",(0,i.jsx)(n.code,{children:"IMDB_Rating * 10"}),"."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"+--------------------------+----------------------+-----------+------+\n|Title                     |Rotten_Tomatoes_Rating|IMDB_Rating|Rating|\n+--------------------------+----------------------+-----------+------+\n|The Land Girls            |NULL                  |6.1        |61.0  |\n|First Love, Last Rites    |NULL                  |6.9        |69.0  |\n|I Married a Strange Person|NULL                  |6.8        |68.0  |\n|Pirates                   |13                    |5.8        |13    |\n|Slam                      |62                    |3.4        |62    |\n|Mississippi Mermaid       |NULL                  |NULL       |NULL  |\n|Following                 |NULL                  |7.7        |77.0  |\n|Foolish                   |NULL                  |3.8        |38.0  |\n|Pirates                   |25                    |5.8        |25    |\n|Duel in the Sun           |86                    |7.0        |86    |\n+--------------------------+----------------------+-----------+------+\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"checking-for-nulls",children:"Checking for nulls"}),"\n",(0,i.jsx)(n.p,{children:"In Spark, null indicates missing or unknown data. To check if a column has null values, you can use:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"isNull()"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"isNotNull()"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"eqNullSafe()"}),": compares two columns, treating null values as equal."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Check if Rotten_Tomatoes_Rating is null\ncheck_nulls = df.select(col("Title")\n               ,col("Rotten_Tomatoes_Rating"),col("IMDB_Rating")\n               ,coalesce(col("Rotten_Tomatoes_Rating")\n               , col("IMDB_Rating") * 10).alias("Rating")).where(col("Rating").isNotNull())\ncheck_nulls.show(10, False)\n'})}),"\n",(0,i.jsxs)(l,{children:[(0,i.jsxs)("summary",{children:["Output: You will see only rows where ",(0,i.jsx)(n.code,{children:"Rating"})," is not null."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"+--------------------------+----------------------+-----------+------+\n|Title                     |Rotten_Tomatoes_Rating|IMDB_Rating|Rating|\n+--------------------------+----------------------+-----------+------+\n|The Land Girls            |NULL                  |6.1        |61.0  |\n|First Love, Last Rites    |NULL                  |6.9        |69.0  |\n|I Married a Strange Person|NULL                  |6.8        |68.0  |\n|Pirates                   |13                    |5.8        |13    |\n|Slam                      |62                    |3.4        |62    |\n|Following                 |NULL                  |7.7        |77.0  |\n|Foolish                   |NULL                  |3.8        |38.0  |\n|Pirates                   |25                    |5.8        |25    |\n|Duel in the Sun           |86                    |7.0        |86    |\n+--------------------------+----------------------+-----------+------+\n"})})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Check for equi-null safe join\n\ndf_eq_null_safe = df.filter(col("IMDB_Rating").eqNullSafe("Rotten_Tomatoes_Rating"))\ndf_eq_null_safe.show()\n'})}),"\n",(0,i.jsxs)(l,{children:[(0,i.jsxs)("summary",{children:["Output: You will see only rows where ",(0,i.jsx)(n.code,{children:"IMDB_Rating"})," is equal to ",(0,i.jsx)(n.code,{children:"Rotten_Tomatoes_Rating"}),"."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"+-----------+----------+------------+----------------------+------+-------------------+\n|IMDB_Rating|IMDB_Votes|Release_Date|Rotten_Tomatoes_Rating|Source|              Title|\n+-----------+----------+------------+----------------------+------+-------------------+\n|       NULL|      NULL|   15-Jan-99|                  NULL|  NULL|Mississippi Mermaid|\n+-----------+----------+------------+----------------------+------+-------------------+\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"nulls-when-ordering-columns",children:"Nulls when ordering columns"}),"\n",(0,i.jsxs)(n.p,{children:["When you order a DataFrame in Spark, null handling can change your result. By default, Spark sorts ",(0,i.jsx)(n.code,{children:"nulls first in ascending order"})," and ",(0,i.jsx)(n.code,{children:"last in descending order"}),"."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"asc_nulls_first"}),": Ascending order, placing nulls at the top."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"asc_nulls_last"}),": Ascending order, placing nulls at the bottom."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"desc_nulls_first"}),": Descending order, placing nulls at the top."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"desc_nulls_last"}),": Descending order, placing nulls at the bottom"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Move nulls to the end in descending order\n\nmove_nulls_to_end = df.orderBy(col("Rotten_Tomatoes_Rating").desc_nulls_last())\nmove_nulls_to_end.show()\n'})}),"\n",(0,i.jsxs)(l,{children:[(0,i.jsxs)("summary",{children:["Output: You will see the rows ordered by ",(0,i.jsx)(n.code,{children:"Rotten_Tomatoes_Rating"})," with nulls at the end."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"+-----------+----------+------------+----------------------+-------------------+--------------------+\n|IMDB_Rating|IMDB_Votes|Release_Date|Rotten_Tomatoes_Rating|             Source|               Title|\n+-----------+----------+------------+----------------------+-------------------+--------------------+\n|        7.0|      2906|   31-Dec-46|                    86|               NULL|     Duel in the Sun|\n|        3.4|       165|    9-Oct-98|                    62|Original Screenplay|                Slam|\n|        5.8|      3275|    1-Jul-86|                    25|               NULL|             Pirates|\n|        5.8|      3275|    1-Jul-86|                    13|               NULL|             Pirates|\n|        6.9|       207|    7-Aug-98|                  NULL|               NULL|First Love, Last ...|\n|       NULL|      NULL|   15-Jan-99|                  NULL|               NULL| Mississippi Mermaid|\n|        7.7|     15133|    4-Apr-99|                  NULL|               NULL|           Following|\n|        6.8|       865|   28-Aug-98|                  NULL|               NULL|I Married a Stran...|\n|        3.8|       353|    9-Apr-99|                  NULL|Original Screenplay|             Foolish|\n|        6.1|      1071|   12-Jun-98|                  NULL|               NULL|      The Land Girls|\n+-----------+----------+------------+----------------------+-------------------+--------------------+\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"replace-nulls-with-a-value",children:"Replace nulls with a value"}),"\n",(0,i.jsx)(n.p,{children:"Spark provides multiple ways to replace null values:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"DataFrame.na.fill(value, subset=None)"})," \u2013 Fill null values in specified columns."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"DataFrame.fillna(value, subset=None)"})," \u2013 Same as na.fill, a common alias."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Replace nulls with a value for Source column\nreplace_nulls = df.na.fill("Un Source",["Source"])\nreplace_nulls.show(5, False)\n'})}),"\n",(0,i.jsxs)(l,{children:[(0,i.jsxs)("summary",{children:["Output: You will see the rows with nulls in the ",(0,i.jsx)(n.code,{children:"Source"})," column replaced with ",(0,i.jsx)(n.code,{children:"Un Source"}),"."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"+-----------+----------+------------+----------------------+-------------------+--------------------------+\n|IMDB_Rating|IMDB_Votes|Release_Date|Rotten_Tomatoes_Rating|Source             |Title                     |\n+-----------+----------+------------+----------------------+-------------------+--------------------------+\n|6.1        |1071      |12-Jun-98   |NULL                  |Un Source          |The Land Girls            |\n|6.9        |207       |7-Aug-98    |NULL                  |Un Source          |First Love, Last Rites    |\n|6.8        |865       |28-Aug-98   |NULL                  |Un Source          |I Married a Strange Person|\n|5.8        |3275      |1-Jul-86    |13                    |Un Source          |Pirates                   |\n|3.4        |165       |9-Oct-98    |62                    |Original Screenplay|Slam                      |\n+-----------+----------+------------+----------------------+-------------------+--------------------------+\n"})})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Replacing multiple columns with nulls\n\nfill_values = {\n    "IMDB_Rating": 0.0,\n    "IMDB_Votes":  0,\n    "Source":      "Unknown Source"\n}\n\ndf_fill_multiple = df.na.fill(fill_values)\ndf_fill_multiple.show(5, False)\n'})}),"\n",(0,i.jsxs)(l,{children:[(0,i.jsx)("summary",{children:"Output: You will see the rows with nulls in the specified columns replaced with the provided values."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"+-----------+----------+------------+----------------------+-------------------+--------------------------+\n|IMDB_Rating|IMDB_Votes|Release_Date|Rotten_Tomatoes_Rating|Source             |Title                     |\n+-----------+----------+------------+----------------------+-------------------+--------------------------+\n|6.1        |1071      |12-Jun-98   |NULL                  |Unknown Source     |The Land Girls            |\n|6.9        |207       |7-Aug-98    |NULL                  |Unknown Source     |First Love, Last Rites    |\n|6.8        |865       |28-Aug-98   |NULL                  |Unknown Source     |I Married a Strange Person|\n|5.8        |3275      |1-Jul-86    |13                    |Unknown Source     |Pirates                   |\n|3.4        |165       |9-Oct-98    |62                    |Original Screenplay|Slam                      |\n+-----------+----------+------------+----------------------+-------------------+--------------------------+\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"remove-nulls",children:"Remove nulls"}),"\n",(0,i.jsx)(n.p,{children:"Sometimes you might want to drop rows that contain any null or all nulls, or conditionally drop rows with null in specific columns."}),"\n",(0,i.jsx)(n.p,{children:"Example 1:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Drop rows with all null values\n\ndf_drop_any = df.na.drop("any") # "any" means if any column in the row has null, that row is dropped.\ndf_drop_any.show(5, False)\n'})}),"\n",(0,i.jsxs)(l,{children:[(0,i.jsx)("summary",{children:"Output: You will see the rows with any null values dropped."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"+-----------+----------+------------+----------------------+-------------------+-----+\n|IMDB_Rating|IMDB_Votes|Release_Date|Rotten_Tomatoes_Rating|             Source|Title|\n+-----------+----------+------------+----------------------+-------------------+-----+\n|        3.4|       165|    9-Oct-98|                    62|Original Screenplay| Slam|\n+-----------+----------+------------+----------------------+-------------------+-----+\n"})})]}),"\n",(0,i.jsx)(n.p,{children:"Example 2:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Drop rows with all null values\ndf_drop_all = df.na.drop("all") # "all" means a row must have all columns as null to be dropped.\ndf_drop_all.show()\n'})}),"\n",(0,i.jsxs)(l,{children:[(0,i.jsx)("summary",{children:"Output: You will see the rows with all null values dropped."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"+-----------+----------+------------+----------------------+-------------------+--------------------------+\n|IMDB_Rating|IMDB_Votes|Release_Date|Rotten_Tomatoes_Rating|Source             |Title                     |\n+-----------+----------+------------+----------------------+-------------------+--------------------------+\n|6.1        |1071      |12-Jun-98   |NULL                  |NULL               |The Land Girls            |\n|6.9        |207       |7-Aug-98    |NULL                  |NULL               |First Love, Last Rites    |\n|6.8        |865       |28-Aug-98   |NULL                  |NULL               |I Married a Strange Person|\n|5.8        |3275      |1-Jul-86    |13                    |NULL               |Pirates                   |\n|3.4        |165       |9-Oct-98    |62                    |Original Screenplay|Slam                      |\n+-----------+----------+------------+----------------------+-------------------+--------------------------+\n"})})]}),"\n",(0,i.jsx)(n.p,{children:"Example 3:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Drop rows if "IMDB_Rating" or "IMDB_Votes" is null\n\ndf_drop_subset = df.na.drop("any", subset=["IMDB_Rating", "IMDB_Votes"])\ndf_drop_subset.show()\n'})}),"\n",(0,i.jsxs)(l,{children:[(0,i.jsxs)("summary",{children:["Output: You will see the rows with null values in ",(0,i.jsx)(n.code,{children:"IMDB_Rating"})," or ",(0,i.jsx)(n.code,{children:"IMDB_Votes"})," dropped."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"+-----------+----------+------------+----------------------+-------------------+--------------------+\n|IMDB_Rating|IMDB_Votes|Release_Date|Rotten_Tomatoes_Rating|             Source|               Title|\n+-----------+----------+------------+----------------------+-------------------+--------------------+\n|        6.1|      1071|   12-Jun-98|                  NULL|               NULL|      The Land Girls|\n|        6.9|       207|    7-Aug-98|                  NULL|               NULL|First Love, Last ...|\n|        6.8|       865|   28-Aug-98|                  NULL|               NULL|I Married a Stran...|\n|        5.8|      3275|    1-Jul-86|                    13|               NULL|             Pirates|\n|        3.4|       165|    9-Oct-98|                    62|Original Screenplay|                Slam|\n|        7.7|     15133|    4-Apr-99|                  NULL|               NULL|           Following|\n|        3.8|       353|    9-Apr-99|                  NULL|Original Screenplay|             Foolish|\n|        5.8|      3275|    1-Jul-86|                    25|               NULL|             Pirates|\n|        7.0|      2906|   31-Dec-46|                    86|               NULL|     Duel in the Sun|\n+-----------+----------+------------+----------------------+-------------------+--------------------+\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"special-null-functions",children:"Special Null functions"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"equal_null"}),": Returns ",(0,i.jsx)(n.code,{children:"true"})," if both expressions are equal (including both being ",(0,i.jsx)(n.code,{children:"NULL"}),"), else ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ifnull"}),": Returns the second expression if the first is ",(0,i.jsx)(n.code,{children:"NULL"}),", otherwise returns the first. Same as ",(0,i.jsx)(n.code,{children:"coalesce"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"nvl"}),": Same as ",(0,i.jsx)(n.code,{children:"ifnull"}),"\u2014substitutes a ",(0,i.jsx)(n.code,{children:"NULL"})," value with a provided fallback. Same as ",(0,i.jsx)(n.code,{children:"coalesce"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"nullif"}),": Returns ",(0,i.jsx)(n.code,{children:"NULL"})," if both expressions match, otherwise returns the first expression."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"nvl2"}),": Returns the second expression if the first is not ",(0,i.jsx)(n.code,{children:"NULL"}),", otherwise returns the third."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'special_nulls = df.selectExpr(\n    "Title",\n    "Rotten_Tomatoes_Rating",\n    "IMDB_Rating",\n    "equal_null(Rotten_Tomatoes_Rating, IMDB_Rating) as equal_null",\n    "ifnull(Rotten_Tomatoes_Rating, IMDB_Rating * 10) as if_null", \n    "nvl(Rotten_Tomatoes_Rating, IMDB_Rating * 10) as nvl",\n    "nullif(Rotten_Tomatoes_Rating, IMDB_Rating * 10) as nullif",\n    "nvl2(Rotten_Tomatoes_Rating, IMDB_Rating * 10, 0.0)" # if (first != null) second else third\n)\n\nspecial_nulls.show(10, False)\n'})}),"\n",(0,i.jsxs)(l,{children:[(0,i.jsx)("summary",{children:"Output: You will see the special null functions applied to the columns."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"+--------------------------+----------------------+-----------+----------+-------+----+------+----+\n|Title                     |Rotten_Tomatoes_Rating|IMDB_Rating|equal_null|if_null|nvl |nullif|nvl2|\n+--------------------------+----------------------+-----------+----------+-------+----+------+----+\n|The Land Girls            |NULL                  |6.1        |false     |61.0   |61.0|NULL  |0.0 |\n|First Love, Last Rites    |NULL                  |6.9        |false     |69.0   |69.0|NULL  |0.0 |\n|I Married a Strange Person|NULL                  |6.8        |false     |68.0   |68.0|NULL  |0.0 |\n|Pirates                   |13                    |5.8        |false     |13     |13  |13    |58.0|\n|Slam                      |62                    |3.4        |false     |62     |62  |62    |34.0|\n|Mississippi Mermaid       |NULL                  |NULL       |true      |NULL   |NULL|NULL  |0.0 |\n|Following                 |NULL                  |7.7        |false     |77.0   |77.0|NULL  |0.0 |\n|Foolish                   |NULL                  |3.8        |false     |38.0   |38.0|NULL  |0.0 |\n|Pirates                   |25                    |5.8        |false     |25     |25  |25    |58.0|\n|Duel in the Sun           |86                    |7.0        |false     |86     |86  |86    |70.0|\n+--------------------------+----------------------+-----------+----------+-------+----+------+----+\n"})})]}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Putting all together -"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Function / Operation"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"One-Line Explanation"})})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"coalesce(expr1, expr2, \u2026)"})}),(0,i.jsx)(n.td,{children:"Returns the first non-null expression in the list."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"isNull(column)"})}),(0,i.jsx)(n.td,{children:"Checks if the column\u2019s value is null, returning a boolean."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"isNotNull(column)"})}),(0,i.jsx)(n.td,{children:"Checks if the column\u2019s value is not null, returning a boolean."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"eqNullSafe(col1, col2)"})," or ",(0,i.jsxs)(n.strong,{children:["col1 ",(0,i.jsx)(n.code,{children:"<=>"})," col2"]})]}),(0,i.jsxs)(n.td,{children:["Returns ",(0,i.jsx)(n.code,{children:"true"})," if ",(0,i.jsx)(n.code,{children:"col1"})," equals ",(0,i.jsx)(n.code,{children:"col2"})," or both are null, otherwise ",(0,i.jsx)(n.code,{children:"false"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"ifnull(expr1, expr2)"})}),(0,i.jsxs)(n.td,{children:["Returns ",(0,i.jsx)(n.code,{children:"expr2"})," if ",(0,i.jsx)(n.code,{children:"expr1"})," is null, otherwise returns ",(0,i.jsx)(n.code,{children:"expr1"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"nvl(expr1, expr2)"})}),(0,i.jsxs)(n.td,{children:["Same as ",(0,i.jsx)(n.code,{children:"ifnull"}),": substitutes ",(0,i.jsx)(n.code,{children:"expr2"})," when ",(0,i.jsx)(n.code,{children:"expr1"})," is null."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"nullif(expr1, expr2)"})}),(0,i.jsxs)(n.td,{children:["Returns ",(0,i.jsx)(n.code,{children:"NULL"})," if ",(0,i.jsx)(n.code,{children:"expr1"})," equals ",(0,i.jsx)(n.code,{children:"expr2"}),", otherwise returns ",(0,i.jsx)(n.code,{children:"expr1"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"nvl2(expr1, expr2, expr3)"})}),(0,i.jsxs)(n.td,{children:["Returns ",(0,i.jsx)(n.code,{children:"expr2"})," if ",(0,i.jsx)(n.code,{children:"expr1"})," is not null, otherwise returns ",(0,i.jsx)(n.code,{children:"expr3"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"fillna / na.fill(value[, subset])"})}),(0,i.jsx)(n.td,{children:"Replaces null values in specified columns (or all) with a given value."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"dropna / na.drop([how, subset])"})}),(0,i.jsx)(n.td,{children:"Removes rows containing null values (based on any/all columns or a subset)."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"asc_nulls_first / asc_nulls_last"})," (when sorting)"]}),(0,i.jsx)(n.td,{children:"Orders rows ascending, placing nulls either first or last."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"desc_nulls_first / desc_nulls_last"})," (when sorting)"]}),(0,i.jsx)(n.td,{children:"Orders rows descending, placing nulls either first or last."})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["I hope you enjoyed reading this blog on handling nulls in Spark, if you are interested in more such content, do check out ",(0,i.jsx)(n.a,{href:"/blog/tags/apache-spark",children:"Apache Spark"}),". series."]}),"\n",(0,i.jsxs)(n.p,{children:["If you have any questions or feedback, feel free to reach out to me on ",(0,i.jsx)(r.A,{})]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},2817:e=>{e.exports=JSON.parse('{"permalink":"/blog/handling-nulls-in-spark","source":"@site/blog/2025-01-13-handling-nulls-in-spark/index.md","title":"Handling Nulls in Spark","description":"In SQL null or Null is a special marker used to indicate that a data value does not exist in the database. A null should not be confused with a value of 0. A null indicates a lack of a value, which is not the same as a zero value.","date":"2025-01-13T00:00:00.000Z","tags":[{"inline":false,"label":"data-engineering","permalink":"/blog/tags/de","description":"DE tag description"},{"inline":false,"label":"apache-spark","permalink":"/blog/tags/apache-spark","description":"Spark tag description"}],"readingTime":10.055,"hasTruncateMarker":true,"authors":[{"name":"Vibhavari Bellutagi","title":"Data Engineer","url":"https://buildwithvibs.in/","socials":{"github":"https://github.com/vibhabellutagi19","linkedin":"https://www.linkedin.com/in/vibhavari-bellutagi-837871189/","twitter":"https://twitter.com/buildwith_vibs"},"imageURL":"https://avatars.githubusercontent.com/u/39341524?s=400&u=5d760c052fe0614d3af649de9e85474d1cafeba7&v=4","key":"me","page":null}],"frontMatter":{"slug":"handling-nulls-in-spark","title":"Handling Nulls in Spark","authors":["me"],"tags":["de","apache-spark"],"keywords":["data engineering","apache spark","nulls in spark"],"hide_table_of_contents":false,"image":"assets/logo.png"},"unlisted":false,"prevItem":{"title":"Under the hood of a Spark job","permalink":"/blog/spark-job-anatomy"},"nextItem":{"title":"Columns and Expressions","permalink":"/blog/columns-and-expressions"}}')}}]);